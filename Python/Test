{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNr2X4K3wj99ckTwWUaSun0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MungarllaSaiCharitha/MungarllaSaiCharithaYadav_Scifor/blob/main/Python/Test\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**1. Write a code in python to show all levels of inheritance**"
      ],
      "metadata": {
        "id": "gc4TsHr_My_Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Base class\n",
        "class Shape:\n",
        "    def __init__(self, name):\n",
        "        self.name = name\n",
        "\n",
        "    def describe(self):\n",
        "        print(f\"I am a {self.name}\")\n",
        "\n",
        "# Single Inheritance\n",
        "class Rectangle(Shape):\n",
        "    def __init__(self, name, width, height):\n",
        "        super().__init__(name)\n",
        "        self.width = width\n",
        "        self.height = height\n",
        "\n",
        "    def area(self):\n",
        "        return self.width * self.height\n",
        "\n",
        "# Multiple Inheritance\n",
        "class Drawable:\n",
        "    def draw(self):\n",
        "        print(f\"{self.name} is being drawn\")\n",
        "\n",
        "class Colored:\n",
        "    def __init__(self, color):\n",
        "        self.color = color\n",
        "\n",
        "    def describe_color(self):\n",
        "        print(f\"{self.name} is {self.color}\")\n",
        "\n",
        "class Square(Shape, Drawable, Colored):\n",
        "    def __init__(self, name, side_length, color):\n",
        "        Shape.__init__(self, name)\n",
        "        Colored.__init__(self, color)\n",
        "        self.side_length = side_length\n",
        "\n",
        "    def area(self):\n",
        "        return self.side_length ** 2\n",
        "\n",
        "# Multilevel Inheritance\n",
        "class Polygon(Shape):\n",
        "    def sides(self, num_sides):\n",
        "        print(f\"{self.name} has {num_sides} sides\")\n",
        "\n",
        "class Triangle(Polygon):\n",
        "    def area(self, base, height):\n",
        "        return 0.5 * base * height\n",
        "\n",
        "# Hierarchical Inheritance\n",
        "class Circle(Shape):\n",
        "    def __init__(self, name, radius):\n",
        "        super().__init__(name)\n",
        "        self.radius = radius\n",
        "\n",
        "    def area(self):\n",
        "        return 3.14 * self.radius ** 2\n",
        "\n",
        "class Ellipse(Shape):\n",
        "    def dimensions(self, semi_major, semi_minor):\n",
        "        print(f\"{self.name} has semi-major axis {semi_major} and semi-minor axis {semi_minor}\")\n",
        "\n",
        "# Hybrid Inheritance\n",
        "class ThreeDimensional:\n",
        "    def describe_dimension(self, dimensions):\n",
        "        print(f\"{self.name} is {dimensions}-dimensional\")\n",
        "\n",
        "class Sphere(Shape, ThreeDimensional):\n",
        "    def __init__(self, name, radius):\n",
        "        Shape.__init__(self, name)\n",
        "        self.radius = radius\n",
        "\n",
        "    def volume(self):\n",
        "        return (4 / 3) * 3.14 * self.radius ** 3\n",
        "\n",
        "class Cube(Shape, ThreeDimensional):\n",
        "    def __init__(self, name, side_length):\n",
        "        Shape.__init__(self, name)\n",
        "        self.side_length = side_length\n",
        "\n",
        "    def volume(self):\n",
        "        return self.side_length ** 3\n",
        "\n",
        "print(\"Single Inheritance:\")\n",
        "rectangle = Rectangle(\"Rectangle\", 5, 3)\n",
        "rectangle.describe()\n",
        "print(f\"Area: {rectangle.area()}\")\n",
        "\n",
        "print(\"\\nMultiple Inheritance:\")\n",
        "square = Square(\"Square\", 4, \"red\")\n",
        "square.describe()\n",
        "square.describe_color()\n",
        "square.draw()\n",
        "print(f\"Area: {square.area()}\")\n",
        "\n",
        "print(\"\\nMultilevel Inheritance:\")\n",
        "triangle = Triangle(\"Triangle\")\n",
        "triangle.describe()\n",
        "triangle.sides(3)\n",
        "print(f\"Area: {triangle.area(4, 3)}\")\n",
        "\n",
        "print(\"\\nHierarchical Inheritance:\")\n",
        "circle = Circle(\"Circle\", 5)\n",
        "circle.describe()\n",
        "print(f\"Area: {circle.area()}\")\n",
        "\n",
        "ellipse = Ellipse(\"Ellipse\")\n",
        "ellipse.describe()\n",
        "ellipse.dimensions(8, 4)\n",
        "\n",
        "print(\"\\nHybrid Inheritance:\")\n",
        "sphere = Sphere(\"Sphere\", 3)\n",
        "sphere.describe()\n",
        "sphere.describe_dimension(3)\n",
        "print(f\"Volume: {sphere.volume():.2f}\")\n",
        "\n",
        "cube = Cube(\"Cube\", 4)\n",
        "cube.describe()\n",
        "cube.describe_dimension(3)\n",
        "print(f\"Volume: {cube.volume()}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9Xn8oD-kMyBo",
        "outputId": "85feff1d-0228-4c74-81cb-f793fbe2d248"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Single Inheritance:\n",
            "I am a Rectangle\n",
            "Area: 15\n",
            "\n",
            "Multiple Inheritance:\n",
            "I am a Square\n",
            "Square is red\n",
            "Square is being drawn\n",
            "Area: 16\n",
            "\n",
            "Multilevel Inheritance:\n",
            "I am a Triangle\n",
            "Triangle has 3 sides\n",
            "Area: 6.0\n",
            "\n",
            "Hierarchical Inheritance:\n",
            "I am a Circle\n",
            "Area: 78.5\n",
            "I am a Ellipse\n",
            "Ellipse has semi-major axis 8 and semi-minor axis 4\n",
            "\n",
            "Hybrid Inheritance:\n",
            "I am a Sphere\n",
            "Sphere is 3-dimensional\n",
            "Volume: 113.04\n",
            "I am a Cube\n",
            "Cube is 3-dimensional\n",
            "Volume: 64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**2. Write a code of Method Overloading**"
      ],
      "metadata": {
        "id": "YPwqpXY2Lb8P"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2Ku3VSt1I6IG",
        "outputId": "bdec2ad1-e98b-4167-9f89-f21f8432c4fb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n",
            "6\n"
          ]
        }
      ],
      "source": [
        "class Operations:\n",
        "    def add(self, a, b, c=None):\n",
        "        if c is None:\n",
        "            return a + b\n",
        "        else:\n",
        "            return a + b + c\n",
        "math_ops = Operations()\n",
        "print(math_ops.add(1, 2))\n",
        "print(math_ops.add(1, 2, 3))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**3. Write a code of MethodÂ Overriding**"
      ],
      "metadata": {
        "id": "L6t00nfdL6PC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Base class\n",
        "class Shape:\n",
        "    def __init__(self, color):\n",
        "        self.color = color\n",
        "\n",
        "    def area(self):\n",
        "        pass\n",
        "\n",
        "    def display_info(self):\n",
        "        print(f\"This is a {self.color} shape\")\n",
        "\n",
        "# Derived classes\n",
        "class Circle(Shape):\n",
        "    def __init__(self, color, radius):\n",
        "        super().__init__(color)\n",
        "        self.radius = radius\n",
        "\n",
        "    def area(self):\n",
        "        return 3.14 * self.radius * self.radius\n",
        "\n",
        "    def display_info(self):\n",
        "        print(f\"This is a {self.color} circle with radius {self.radius}\")\n",
        "\n",
        "class Rectangle(Shape):\n",
        "    def __init__(self, color, length, width):\n",
        "        super().__init__(color)\n",
        "        self.length = length\n",
        "        self.width = width\n",
        "\n",
        "    def area(self):\n",
        "        return self.length * self.width\n",
        "\n",
        "    def display_info(self):\n",
        "        print(f\"This is a {self.color} rectangle with length {self.length} and width {self.width}\")\n",
        "\n",
        "# Method overriding\n",
        "circle = Circle(\"red\", 5)\n",
        "circle.display_info()\n",
        "print(\"Area of the circle:\", circle.area())\n",
        "\n",
        "rectangle = Rectangle(\"blue\", 4, 6)\n",
        "rectangle.display_info()\n",
        "print(\"Area of the rectangle:\", rectangle.area())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BD08jX6dL5Ck",
        "outputId": "8dc4c3af-cc93-4db6-9bf0-4362169fd419"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This is a red circle with radius 5\n",
            "Area of the circle: 78.5\n",
            "This is a blue rectangle with length 4 and width 6\n",
            "Area of the rectangle: 24\n"
          ]
        }
      ]
    }
  ]
}